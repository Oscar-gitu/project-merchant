name: Pipeline-Dev
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy_pipelines:
    runs-on: ubuntu-latest
    environment: "dev"
    name: "BUILD - dev - pipelines"
    if: ${{ github.event_name != 'pull_request' }}
    env:
      BUCKET: dev-merchant-working-capital-artifacts-${{ secrets.ACCOUNT }}
    steps:
      - name: "Deploy_Pipeline"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy Pipeline
        run: |
          aws cloudformation deploy --template-file ./templates/pipeline.yaml --stack-name dev-merchant-working-capital-pipelines --parameter-overrides Environment=dev  --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_NAMED_IAM CAPABILITY_IAM

  #sonar:
  #  name: Sonar
  #  needs: [unit_test]
  #  runs-on: ubuntu-latest
  #  env:
  #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
  #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        fetch-depth: 0
  #    - name: Download Coverage report from Build Job
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: coverage
  #    - name: SonarCloud Scan
  #      uses: SonarSource/sonarcloud-github-action@master
  #    - name: SonarQube Quality Gate check
  #      uses: SonarSource/sonarqube-quality-gate-action@master

  unit_test:
    name: Test
    runs-on: ubuntu-latest
    env:
      app_name: merchantworkingcapitalback
      ENVIRONMENT: dev
      DEVELOPER: DeployUnittest
      BUCKETTEMPLATES: dev-merchant-working-capital-artifacts-${{ secrets.ACCOUNT }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          cp ./.env.dist ./.env
          apm project install
          sudo apt-get install zip
      - name: run tests
        run: |
          coverage run -m unittest discover -v
          coverage xml -o coverage.xml
      - name: Upload Coverage report to Sonar Job
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml
      - name: Compile Project
        run: |
          apm project synth
          zip -r context src templates
      - name: Upload Artifact to Deploy Job
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: context.zip

  deploy:
    name: Deploy
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      BUCKET: dev-merchant-working-capital-artifacts-${{ secrets.ACCOUNT }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy Project
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          for t in $(ls "templates")
            do
                aws cloudformation package --template-file ./templates/$t --s3-bucket $BUCKET --output-template-file ./templates/$t --s3-prefix deploys/back/
                if [ "${t}" != "ProjectTemplate.json" ]
                then
                    aws s3 cp ./templates/$t s3://$BUCKET/deploys/back/$t
                fi
            done
          cd templates
          zip -r projectTemplate.zip ./projectTemplate.json
          aws s3 cp projectTemplate.zip s3://$BUCKET/deploys/back/projectTemplate.zip
